# SI413 Lab 1.1: Spec for Just Strings language


your_name: Richard Kang


your_alpha: m263222


used_ai: Y

# Task 1
language_name: Simple


example_program: |
   $ Hello I am performing a nested commenteds
       $ This is a second comment within the comment and won't screw up the code
           -d:"Hello World Part2"
       $
   $
   command -i -r -c:"World is cool" -d


example_input_1: |
   # Hello


example_output_1: |
   # olleH World is cool


example_input_2: |
   # Minecraft


example_output_2: |
   # tfarceniM World is cool


# Task 3
language_syntax: |
   A string literal is a double-quote character ", followed by
   a sequence of ordinary characters and escape sequences, followed by
   another double quote character.

   (Added Revision 1) Escape sequences start with a backslash \

   (Added Revision 1) To include a $ inside of a string literal add a blackslash before the$ inside the string literal
  
   Any space, tab, or newlines will be treated as whitespace, unless if it is within ""

   Comments are created with two $. Anything in between the dollar signs will be considered a comment and will be ignored
  
   The code will consider all 95 basic ASCII printable characters besides, $, ", and \


   The program will be performed with at least one action (-i, -d,-r,-c)


language_semantics: |
   Commands:
   -i will read a single line of text from the console as a string in your program


   -d will display any string expression to the screen. d:"" can be used to specfiy a string to output. -d will add a newline when displaying it to the terminal


   -r will reverse any string expression producing a new string with the same characters in the reversed order. -r:"" can be used to specify string being reversed


   -c will concatenate two strings together. The 2nd string that will be concatenated will be specified with a -c"" with the 2nd string being within the double quotes
  
   comments will be created with two $. Anything in between the two dollar signs will be considered as a comment. Comments have no effect to the program


   The program will interpret the program from left to right.

    The order of operations:
        HIGHEST 
        -r (reverse) 
        -c (concatenation) 
        -d (display)
        $ $ Comments
        LOWEST
   (Added Revision 1) Valid escapes are:
      \"
      \\
      \$
      \n
      These are used so that these characters can be written within a string literal

   (Added Revision 1) Comments:
      $ can be written inside of a string literal instead of being used as a comment by adding a backslash before it, otherwise 
      the $ $ will be treated as a comment instead of a string.

# Task 4

reviewer_for: Richard Kang

reviewed_by: Ellijah Baquiran

review_passed: Y

reviewer_comments: |
   Order of operations for specifying which takes precedence over which


